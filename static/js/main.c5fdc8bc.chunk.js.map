{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","records","setRecords","videoElement","useRef","startButtonElement","stopButtonElement","modelRef","lastDetectionRef","recorderRef","shouldRecordRef","isRecordingRef","detectFrame","a","current","stopRecording","detect","predictions","foundperson","i","length","class","console","log","JSON","stringify","startRecording","push","filter","Boolean","slice","Math","max","requestAnimationFrame","MediaRecorder","window","stream","ondataavailable","e","title","Date","href","URL","createObjectURL","data","previousRecords","start","stop","useEffect","setAttribute","navigator","mediaDevices","getUserMedia","audio","video","srcObject","cocoSSD","model","removeAttribute","error","prepare","className","autoPlay","playsInline","muted","ref","role","onClick","map","record","key","controls","src","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c5fdc8bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useRef, useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as cocoSSD from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [records, setRecords] = useState([]);\n\n  const videoElement = useRef(null);\n  const startButtonElement = useRef(null);\n  const stopButtonElement = useRef(null);\n  const modelRef = useRef(null);\n  const lastDetectionRef = useRef([]);\n  const recorderRef = useRef(null);\n  const shouldRecordRef = useRef(false);\n  const isRecordingRef = useRef(false);\n\n  //when the page renders, you wanna do this\n  useEffect(() => {\n    async function prepare() {\n      startButtonElement.current.setAttribute(\"disabled\", true);\n      stopButtonElement.current.setAttribute(\"disabled\", true);\n      //If camera detected, then\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        //get the cam, make sure audio and video are enabled\n        try {\n          //on iphones it defaults to front camera, to change it google\n          const stream = await navigator.mediaDevices.getUserMedia({\n            audio: true,\n            video: true,\n          });\n          //put the stream on our window stream\n          window.stream = stream;\n          videoElement.current.srcObject = stream;\n\n          //TODO LOAD THE MODEL FROM COCO & assign\n          const model = await cocoSSD.load();\n          modelRef.current = model;\n\n          //starts so not disabeld\n          startButtonElement.current.removeAttribute(\"disabled\");\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n    prepare();\n  }, []);\n\n  async function detectFrame() {\n    //when should recordref value changes to false, we wanna stop recording (because frame runs recursively)\n    if (!shouldRecordRef.current) {\n      stopRecording();\n      return;\n    }\n\n    //Predictions will be of the objects detected within our frame\n    const predictions = await modelRef.current.detect(videoElement.current);\n    let foundperson = false;\n\n    for (let i = 0; i < predictions.length; i++) {\n      if (predictions[i].class == \"person\") {\n        console.log(JSON.stringify(predictions[i]));\n        foundperson = true;\n      }\n    }\n\n    if (foundperson) {\n      startRecording();\n      lastDetectionRef.current.push(true);\n    } else if (lastDetectionRef.current.filter(Boolean).length) { //cont.. recording because there was one true before, maybe we lost couple frame so we do not detect a person.\n      startRecording();\n      lastDetectionRef.current.push(false)\n    }\n    else { //no objs within last ten frames stop recording\n      stopRecording();\n    }\n\n    //leave ten most recent frames\n    lastDetectionRef.current = lastDetectionRef.current.slice(\n      Math.max(lastDetectionRef.current.length - 10, 0)\n    )\n    requestAnimationFrame(() => {\n      detectFrame();\n    });\n  }\n\n  function startRecording() {\n    //If already started recording, then get out of this func\n    if (isRecordingRef.current) {\n      return;\n    }\n    //else start\n    isRecordingRef.current = true;\n    console.log(\"start recording\");\n\n    recorderRef.current = new MediaRecorder(window.stream);\n\n    recorderRef.current.ondataavailable = function (e) {\n      const title = new Date() + \"\";\n      const href = URL.createObjectURL(e.data);\n      setRecords(previousRecords => {\n        return [...previousRecords, { href, title }];\n      });\n    };\n    recorderRef.current.start();\n  };\n\n  function stopRecording() {\n    //If already stopped recording, then get out of this func\n    if (!isRecordingRef.current) {\n      return;\n    }\n    //else stop\n    isRecordingRef.current = false;\n    recorderRef.current.stop();\n    console.log(\"Stopped recording\");\n    lastDetectionRef.current = []\n  }\n\n  return (\n    <div className=\"p-3\">\n      <div>\n        <video autoPlay playsInline muted ref={videoElement} />\n      </div>\n      <div className=\"btn-toolbar\" role=\"toolbar\">\n        <div className=\"btn-group mr-2\" role=\"group\">\n          <button\n            className=\"btn btn-success\"\n            onClick={() => {\n              shouldRecordRef.current = true;\n              stopButtonElement.current.removeAttribute(\"disabled\");\n              startButtonElement.current.setAttribute(\"disabled\", true);\n              detectFrame();\n            }}\n            ref={startButtonElement}\n          >\n            Start\n          </button>\n        </div>\n        <div className=\"btn-group mr-2\" role=\"group\">\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              shouldRecordRef.current = false;\n              startButtonElement.current.removeAttribute(\"disabled\");\n              stopButtonElement.current.setAttribute(\"disabled\", true);\n              stopRecording();\n            }}\n            ref={stopButtonElement}\n          >\n            Stop\n          </button>\n        </div>\n      </div>\n      <div className=\"row p-3\">\n        <h3>Records:</h3>\n        {!records.length\n          ? null\n          : records.map((record) => {\n            return (\n              <div className=\"card mt-3 w-100\" key={record.title}>\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">{record.title}</h5>\n                  <video controls src={record.href}></video>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}